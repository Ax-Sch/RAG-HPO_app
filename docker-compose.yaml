services:

# 3 containers of whom one should be chosen by the profiles options to serve the local llm with ollama:
  # CPU only container
  ollama:
    image: ollama/ollama:latest
    networks:
      - no_internet_network
    read_only: true
    volumes:
      - ./llm_files:/root/.ollama/:ro
    restart: always
    profiles:
      - ollama_container

  # GPU (nvidia) container
  ollama_gpu:
    image: ollama/ollama:latest
    networks:
      - no_internet_network
    read_only: true
    volumes:
      - ./llm_files:/root/.ollama/:ro
    hostname: ollama
    profiles:
      - ollama_container_gpu
    restart: always
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
  
  # proxy to local installation
  ollama_proxy:
    image: nginx:latest
    networks:
      - no_internet_network
      - internet_network
    hostname: ollama
    volumes:
      - ./proxies/ollama/nginx.conf:/etc/nginx/nginx.conf:ro
    restart: always
    profiles:
      - ollama_proxy


# Streamlit app, HPO-gene API and Chat-app file mod API:
  # the actual website / streamlit is running here
  app:
    build:
      context: ./docker
      dockerfile: app/Dockerfile
    networks:
      - no_internet_network
      - reverse_proxy_streamlit_nw
    read_only: true
    tmpfs:
      - /python_tmp
    volumes:
      - ./app:/app:ro  # read only
    command: /bin/bash -c "cp -r /tmp/* /python_tmp/ && streamlit run /app/app.py --browser.gatherUsageStats false --browser.serverAddress localhost"
    restart: always

  # API to retrieve genes of HPO terms
  retrieve_hpo_api:
    build:
      context: ./docker
      dockerfile: api/Dockerfile
    networks:
      - no_internet_network
      - internet_network
    read_only: true
    volumes:
      - ./app:/app:ro # read only
    restart: always
    command: ["python", "/app/app_functions/HPO_to_gene/hpo_gene_api_internal.py"]

  # API to add or edit prompts of the chat app
  chat_app_file_mod_api:
    build:
      context: ./docker
      dockerfile: api/Dockerfile
    networks:
      - no_internet_network
    read_only: true
    volumes:
      - ./app/pages:/app/pages # needs write access to pages folder only
      - ./app/app_functions/chat_app:/app/app_functions/chat_app:ro
    restart: always
    command: ["python", "/app/app_functions/chat_app/chat_app_file_mod_api.py"]



# containers that serve the website / streamlit app, select by profiles
  # serve the streamlit app to the localhost/127.0.0.1 only
  reverse_proxy_streamlit:
    image: nginx:latest
    networks:
      - internet_network  # Connect to the internet network
      - reverse_proxy_streamlit_nw  # Access `app` container via internal network
    ports:
      - "127.0.0.1:8501:8501"  # Expose port 8501 to the host
    volumes:
      - ./proxies/streamlit/nginx.conf:/etc/nginx/nginx.conf:ro  # Mount custom nginx config
    restart: always
    profiles: 
      - serve_local

# activate ssh server to port-forward the streamlit app; only port-forwarding allowed; interactive login via ssh is deactivated
  ssh-server:
    build:
      context: ./docker
      dockerfile: ssh_server/Dockerfile
    ports:
      - "2222:22" # Expose SSH server on host port 2222
    networks:
      - internet_network  # Connect to the internet network
      - reverse_proxy_streamlit_nw  # Access `app` container via internal network
    command: ["/usr/sbin/sshd", "-D"] 
    restart: always
    profiles: 
      - serve_ssh



# networks - only internet_network is connected to the network of the host machine
networks:
  no_internet_network:
    internal: true
    name: RAG_no_internet_network
  reverse_proxy_streamlit_nw:
    internal: true
    name: RAG_reverse_proxy_streamlit_nw
  internet_network:
    driver: bridge
    name: RAG_internet_network

